// 비트 이동 연산자 : >>, >>>, << 
package ex05;

public class Exam04_2 {
    public static void main(String[] args) {
        int i = 0b01101001; // 105
        System.out.println(i);
        // 오른쪽으로 이동 후, 
        // 왼쪽 쪽 빈자리 : 원래 숫자와 같은 부호로 값으로 채운다.
        //                  양수면 0, 음수면 1을 채운다.
        // 오른쪽 경계를 넘어간 비트 : 짜른다.
        
        // 00000000 0000000 00000000 01101001
        System.out.println(i >> 1); 
        // x0000000 0000000 00000000 0110100|1
        // x0000000 0000000 00000000 0110100|100 = > 52
        
        System.out.println(i >> 2); 
        // xx000000 0000000 00000000 0110100|01
        // 00000000 0000000 00000000 0110100|100 = > 26
        System.out.println(i >> 3); 
        // xxx00000 0000000 00000000 0110100|001
        // 00000000 0000000 00000000 0110101   = > 13
        System.out.println(i >> 4); 
        // x0000000 0000000 00000000 01101000|1001
        // x00000000000000000000000001101   = > 6
        

        // 음수를 이동
        i = 0b11111111_11111111_11111111_10101001; // -87
        System.out.println(i); 
        System.out.println(i >> 1); 
        // 1_11111111_11111111_11111111_1010100|1   => -44 
        // => 왼쪽 빈자리는 숫자의 부호비트로 채운다.
        //    음수니까 1로 채운다.
        // => 2로 나눈 후에 소수점이 있으면 
        //    그 수보다 더 작은 정수값이 되는 결과가 나온다.

        System.out.println(i >> 2); 
        // 11_11111111_11111111_11111111_101010|01 => -22

        System.out.println(i >> 3); 
        // 111_11111111_11111111_11111111_10101|001 => -11
        
        System.out.println(i >> 4);
        // 1111_11111111_11111111_11111111_1010|1001 => -6
    }
}

// 오른쪽 이동
// - 1비트 이동은 나누기 2 한 것과 같은 효과를 준다.
// - 소수점 이하는 짤리는 효과를 갖는다.
//  실무에서는 나눗엠 연산이 비용(시간과cpu사용량)이 많이 들기 떄문에
// 소수점 이하까지 정확하게 계산할게 아니라면
// 오른 쪽 비트 이동 연산자를 사용하여 주로 처리한다.
